package parser

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i mydb/internal/database/compute.Parser -o ./parser/parser_mock.go -n ParserMock

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ParserMock implements compute.Parser
type ParserMock struct {
	t minimock.Tester

	funcParse          func(cmd string) (sa1 []string, err error)
	inspectFuncParse   func(cmd string)
	afterParseCounter  uint64
	beforeParseCounter uint64
	ParseMock          mParserMockParse
}

// NewParserMock returns a mock for compute.Parser
func NewParserMock(t minimock.Tester) *ParserMock {
	m := &ParserMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ParseMock = mParserMockParse{mock: m}
	m.ParseMock.callArgs = []*ParserMockParseParams{}

	return m
}

type mParserMockParse struct {
	mock               *ParserMock
	defaultExpectation *ParserMockParseExpectation
	expectations       []*ParserMockParseExpectation

	callArgs []*ParserMockParseParams
	mutex    sync.RWMutex
}

// ParserMockParseExpectation specifies expectation struct of the Parser.Parse
type ParserMockParseExpectation struct {
	mock    *ParserMock
	params  *ParserMockParseParams
	results *ParserMockParseResults
	Counter uint64
}

// ParserMockParseParams contains parameters of the Parser.Parse
type ParserMockParseParams struct {
	cmd string
}

// ParserMockParseResults contains results of the Parser.Parse
type ParserMockParseResults struct {
	sa1 []string
	err error
}

// Expect sets up expected params for Parser.Parse
func (mmParse *mParserMockParse) Expect(cmd string) *mParserMockParse {
	if mmParse.mock.funcParse != nil {
		mmParse.mock.t.Fatalf("ParserMock.Parse mock is already set by Set")
	}

	if mmParse.defaultExpectation == nil {
		mmParse.defaultExpectation = &ParserMockParseExpectation{}
	}

	mmParse.defaultExpectation.params = &ParserMockParseParams{cmd}
	for _, e := range mmParse.expectations {
		if minimock.Equal(e.params, mmParse.defaultExpectation.params) {
			mmParse.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmParse.defaultExpectation.params)
		}
	}

	return mmParse
}

// Inspect accepts an inspector function that has same arguments as the Parser.Parse
func (mmParse *mParserMockParse) Inspect(f func(cmd string)) *mParserMockParse {
	if mmParse.mock.inspectFuncParse != nil {
		mmParse.mock.t.Fatalf("Inspect function is already set for ParserMock.Parse")
	}

	mmParse.mock.inspectFuncParse = f

	return mmParse
}

// Return sets up results that will be returned by Parser.Parse
func (mmParse *mParserMockParse) Return(sa1 []string, err error) *ParserMock {
	if mmParse.mock.funcParse != nil {
		mmParse.mock.t.Fatalf("ParserMock.Parse mock is already set by Set")
	}

	if mmParse.defaultExpectation == nil {
		mmParse.defaultExpectation = &ParserMockParseExpectation{mock: mmParse.mock}
	}
	mmParse.defaultExpectation.results = &ParserMockParseResults{sa1, err}
	return mmParse.mock
}

// Set uses given function f to mock the Parser.Parse method
func (mmParse *mParserMockParse) Set(f func(cmd string) (sa1 []string, err error)) *ParserMock {
	if mmParse.defaultExpectation != nil {
		mmParse.mock.t.Fatalf("Default expectation is already set for the Parser.Parse method")
	}

	if len(mmParse.expectations) > 0 {
		mmParse.mock.t.Fatalf("Some expectations are already set for the Parser.Parse method")
	}

	mmParse.mock.funcParse = f
	return mmParse.mock
}

// When sets expectation for the Parser.Parse which will trigger the result defined by the following
// Then helper
func (mmParse *mParserMockParse) When(cmd string) *ParserMockParseExpectation {
	if mmParse.mock.funcParse != nil {
		mmParse.mock.t.Fatalf("ParserMock.Parse mock is already set by Set")
	}

	expectation := &ParserMockParseExpectation{
		mock:   mmParse.mock,
		params: &ParserMockParseParams{cmd},
	}
	mmParse.expectations = append(mmParse.expectations, expectation)
	return expectation
}

// Then sets up Parser.Parse return parameters for the expectation previously defined by the When method
func (e *ParserMockParseExpectation) Then(sa1 []string, err error) *ParserMock {
	e.results = &ParserMockParseResults{sa1, err}
	return e.mock
}

// Parse implements compute.Parser
func (mmParse *ParserMock) Parse(cmd string) (sa1 []string, err error) {
	mm_atomic.AddUint64(&mmParse.beforeParseCounter, 1)
	defer mm_atomic.AddUint64(&mmParse.afterParseCounter, 1)

	if mmParse.inspectFuncParse != nil {
		mmParse.inspectFuncParse(cmd)
	}

	mm_params := &ParserMockParseParams{cmd}

	// Record call args
	mmParse.ParseMock.mutex.Lock()
	mmParse.ParseMock.callArgs = append(mmParse.ParseMock.callArgs, mm_params)
	mmParse.ParseMock.mutex.Unlock()

	for _, e := range mmParse.ParseMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sa1, e.results.err
		}
	}

	if mmParse.ParseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmParse.ParseMock.defaultExpectation.Counter, 1)
		mm_want := mmParse.ParseMock.defaultExpectation.params
		mm_got := ParserMockParseParams{cmd}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmParse.t.Errorf("ParserMock.Parse got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmParse.ParseMock.defaultExpectation.results
		if mm_results == nil {
			mmParse.t.Fatal("No results are set for the ParserMock.Parse")
		}
		return (*mm_results).sa1, (*mm_results).err
	}
	if mmParse.funcParse != nil {
		return mmParse.funcParse(cmd)
	}
	mmParse.t.Fatalf("Unexpected call to ParserMock.Parse. %v", cmd)
	return
}

// ParseAfterCounter returns a count of finished ParserMock.Parse invocations
func (mmParse *ParserMock) ParseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmParse.afterParseCounter)
}

// ParseBeforeCounter returns a count of ParserMock.Parse invocations
func (mmParse *ParserMock) ParseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmParse.beforeParseCounter)
}

// Calls returns a list of arguments used in each call to ParserMock.Parse.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmParse *mParserMockParse) Calls() []*ParserMockParseParams {
	mmParse.mutex.RLock()

	argCopy := make([]*ParserMockParseParams, len(mmParse.callArgs))
	copy(argCopy, mmParse.callArgs)

	mmParse.mutex.RUnlock()

	return argCopy
}

// MinimockParseDone returns true if the count of the Parse invocations corresponds
// the number of defined expectations
func (m *ParserMock) MinimockParseDone() bool {
	for _, e := range m.ParseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ParseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterParseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcParse != nil && mm_atomic.LoadUint64(&m.afterParseCounter) < 1 {
		return false
	}
	return true
}

// MinimockParseInspect logs each unmet expectation
func (m *ParserMock) MinimockParseInspect() {
	for _, e := range m.ParseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ParserMock.Parse with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ParseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterParseCounter) < 1 {
		if m.ParseMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ParserMock.Parse")
		} else {
			m.t.Errorf("Expected call to ParserMock.Parse with params: %#v", *m.ParseMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcParse != nil && mm_atomic.LoadUint64(&m.afterParseCounter) < 1 {
		m.t.Error("Expected call to ParserMock.Parse")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ParserMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockParseInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ParserMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ParserMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockParseDone()
}
